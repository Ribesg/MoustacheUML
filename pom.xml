<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<!-- Ce qui est au dessus est plus ou moins le Header "standard" d'un pom.xml -->

	<!-- Le groupeId est aussi le nom du package de base -->
	<groupId>fr.ribesg.imag</groupId>

	<!-- Cette valeur est utilisée pour le nom du fichier .jar... -->
	<artifactId>MoustacheUML</artifactId>

	<!-- ...et celle-là pour le "vrai" nom du projet -->
	<name>Moustache UML</name>

	<!-- Pas super utile dans ce cas, mais bon. Pour l'exemple. -->
	<url>https://github.com/Ribesg/MoustacheUML</url>

	<!-- La version du projet -->
	<version>0.1-SNAPSHOT</version>

	<!-- Ce pom.xml a pour but de créer un fichier .jar, on l'indique ici -->
	<packaging>jar</packaging>

	<!-- On peut aussi spécifier la licence ici ! On peut même en mettre plusieurs... -->
	<licenses>
		<license>
			<name>GNU General Public License {GPL} v3</name>
			<url>http://www.gnu.org/licenses/gpl.txt</url>
		</license>
	</licenses>

	<!-- On s'assure que les sources sont bien lues comme étant de l'UTF-8 -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<!--
		On peut lister la liste des développeurs. Vous avez qu'à vous ajouter,
		ça prouvera que vous avez lu ça et que je fais pas ça pour rien x)
	-->
	<developers>
		<developer>
			<id>ribesg</id>
			<name>Gaël "Ribesg" Ribes</name>
			<email>ribesg@yahoo.fr</email>
			<url>http://www.ribesg.fr/</url>
			<roles>
				<role>Git Master</role>
				<role>Maven Master</role>
				<role>Jenkins Master</role>
				<role>Main contributor</role>
			</roles>
			<timezone>+1</timezone>
		</developer>
	</developers>

	<!--
		On définit ici les repositories, c'est là que Maven va chercher les
		plugins Maven et/ou librairies Java (ou pas Java d'ailleurs) qu'il
		ne trouvepas dans les repositories qu'il connait déjà.
		En gros, on met normalement ici les repositories non-standards.
	-->
	<repositories>
		<repository>
			<!--
				Donc là je fais un truc hyper sale :
				Comme JGraphX n'a pas de repo Maven officiel, je crée un
				pseudo-repo DANS le repo Git. C'est mal.
				Ne faites pas ça à la maison.
			-->
			<id>local-git-repo</id>
			<url>file://${project.basedir}/lib/</url>
		</repository>
	</repositories>

	<!--
		C'est là qu'on définit les librairies dont on a besoin.
		Comme dit plus tôt, Maven va se débrouiller pour les trouver, quelque part.
	-->
	<dependencies>
		<dependency>
			<!--
				La libraire JGraphX. Il est possible que l'IDE ne trouve pas la
				bonne version à cause du fait qu'elle est dans un pseudo-repo,
				mais Maven la trouvera.
			-->
			<groupId>com.mxgraph</groupId>
			<artifactId>jgraphx</artifactId>
			<version>2.3.0.0</version>
		</dependency>
	</dependencies>

	<!-- Ci-dessous la configuration du build -->
	<build>

		<!-- Le nom final du fichier -->
		<finalName>${project.artifactId}</finalName>

		<!-- Le goal par défaut à utiliser -->
		<defaultGoal>clean package</defaultGoal>

		<!--
			Maven fonctionne à base de plugins.
			Il faut savoir que plusieurs plugins sont déjà là "par défaut".
			En fait, chaque pom.xml "étend" un pom.xml par défaut, un peu comme
			toute classe étend la classe "Objet" en Java, qui a déjà des méthodes.
		-->

		<plugins>

			<plugin>
				<!--
					Permet de compiler pour Java 7.
					Note : On peut très bien demander de compiler du code 1.5 pour une
					       JVM 1.7, ou même du code 1.7 pour une JVM 1.5. Par contre,
					       on aurait d'autres paramètres et trucs chiants.
				-->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.5.1</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>

			<plugin>
				<!-- Permet de configurer un peu le contenu du .jar -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archive>
						<!-- Ici on gère le contenu du Manifest -->
						<manifest>
							<mainClass>fr.ribesg.imag.moustacheuml.Main</mainClass>
						</manifest>
						<manifestEntries>
							<!--
								Juste pour modifier le Built-By qui affiche
								souvent n'importe quoi
							-->
							<Built-By>Some Computer Somewhere</Built-By>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<!--
					L'excellent Maven Shade Plugin permet d'inclure des dépendances
					(et même un peu tout ce qu'on veut en fait) dans le fichier .jar créé.
					Ici, on stipule juste qu'on l'utilise, et on lui demande de minimiser la
					taille du .jar. Il va donc :
					- Inclure toutes les dépendances dans le fichier .jar
					- Enlever une par une les classes de dépendances qui ne sont jamais utilisées
				-->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.1</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<createDependencyReducedPom>false</createDependencyReducedPom>
							<minimizeJar>true</minimizeJar>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<!--
					TrueZip ! Ce plugin permet de faire vraiment tout et n'importe quoi en terme
					de copie/déplacement/suppression de fichier, dans les fichiers .zip (et donc
					.jar !) comme en dehors. On peut copier/déplacer un/des fichiers depuis
					l'extérieur d'un .jar à l'intérieur ou l'inverse, et même d'un .jar à un autre.
				-->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>truezip-maven-plugin</artifactId>
				<version>1.1</version>
				<executions>
					<execution>
						<!-- Copie extérieur => dans un jar -->
						<id>copy-into</id>
						<goals>
							<goal>copy</goal>
						</goals>
						<phase>package</phase>
						<configuration>
							<!-- On inclut le code source dans le fichier .jar -->
							<fileset>
								<directory>${project.basedir}/src/main/java</directory>
								<includes>
									<include>**</include>
								</includes>
								<outputDirectory>target/${project.build.finalName}.jar/sources</outputDirectory>
							</fileset>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>
</project>